from util import if_elsefrom Compiler import typesprogram.bit_length = 32def compute_intersection(a, b):    """ Naive quadratic private set intersection.    Returns: secret Array with intersection  and    secret Array of bits indicating whether Alice's input matches or not """    n = len(a)    m = len(b)    if m < n:        raise CompilerError('First set should be smaller or same size')    intersection = Array(n, sint)    #    pairs =[(i,j) for i in range(n) for j in range(m)]    #    for i, j in pairs:#        intersection[i] = if_else(a[i] == b[j], a[i], 0)     @for_range(n*m)    def _(k):        i = k%n        j = k//n        intersection[i] = if_else(a[i] == b[j], a[i], intersection[i])                #    matches = Matrix(n,m, sint)    #    match_col = Array(n, sint)#    v = Array(m, sint)        #    @for_range_opt(n)#    def _(i):#        v.assign_all(a[i], m)#        matches.set_column(i, (b.get_vector()==v.get_vector())*a[i])    #    intersection = matches.dot(a)    return intersectionn=128m=128a = Array(n, sint)b = Array(m, sint)@for_range_opt(n)def _(i):    a[i] = sfix.get_input_from(0)@for_range_opt(m)def _(j):    b[j] = sfix.get_input_from(1)intersection  = compute_intersection(a,b)@for_range(n)def _(i):    print_str('%s, ', intersection[i].reveal())