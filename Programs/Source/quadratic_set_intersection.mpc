"""
Following TPMPC 2017 workshop in Bristol does element-by-element
set intersection check
"""

from util import if_else

program.bit_length = 32

def compute_intersection(a, b):
    """ Naive quadratic private set intersection.

    Returns: secret Array with intersection  and
    secret Array of bits indicating whether Alice's input matches or not """
    n = len(a)
    m = len(b)
    if m < n:
        raise CompilerError('First set should be smaller or same size')
    intersection = Array(n, sint)


    @for_range_opt(n)
    def _(i):
        @for_range_opt(m)
        def _(j):
            intersection[i] = if_else(a[i] == b[j], a[i], intersection[i]) # match * a[i] + (1 - match) * intersection[i]
    return intersection




    
def set_intersection_inputs(n, m):
    a = Array(n, sint)
    b = Array(m, sint)

    @for_range_opt(n)
    def _(i):
        a[i] = sfix.get_input_from(0)
    @for_range_opt(m)
    def _(j):
        b[j] = sfix.get_input_from(1)

    intersection  = compute_intersection(a,b)



set_intersection_inputs(512, 512)