import util
from util import if_else
from Compiler import library

program.bit_length = 32


def merge_and_shuffle(combo):
    """ Merges two databases A and B, which are concatenated within combo
    then does a loop to find matches,
    shuffles
    then returns only the elements of B that matched
    like a LEFT-JOIN on B
    
    Assume that the columns of A are ID, in_set_B = 0 , match-key = mk
    Assume that the columns of B are ID, in_set_B = 1, match-key = 0
    
    If the ID matches, we return ID, in_set_B=1, match-key = mk
    (although technically the middle column is not needed to return, this
     is irrelevant either way)
    """
    N = len(combo)
    intersection = Matrix(N, 3, sint)

    
    all_zeros = Array(3, sint)
    all_zeros.assign_all(0)
    

    all_match = Matrix(N,3, sint)
    
    all_match.set_column(0, combo.get_column(0))
    all_match.set_column(1, Array(N, sint).assign_all(1).get_vector())
    all_match.set_column(2, combo.get_column(2))
    
    
    match = Array(N, sint)
    
    shift_up = Array(N, sint)
    shift_up = combo.get_column(0).get_vector(base=1)
    
    match.assign_vector(shift_up.get_vector() == combo.get_column(0).get_vector())
    

    
    #check the 0th element    
    intersection[0] = if_else(combo[0][1]==1,  combo[0].get_vector(), all_zeros.get_vector())
    
    @for_range(N-1)
    def _(i):
    
        intersection[i+1] = if_else(match[i], all_match[i].get_vector(), 
                                    if_else(combo[i+1][1]==1, combo[i+1].get_vector(), 
                                            all_zeros.get_vector()))


    
    return intersection
    

            
    

def shuffled_intersection_inputs(n, m):
    combo = Matrix(n+m, 3, sint)


    # input of each player, along with what set it came from
    @for_range_opt(n)
    def _(i):
        combo[i][0] = sfix.get_input_from(0)
        combo[i][1] = 0
        combo[i][2] = i+1 # the match key, for now
    @for_range_opt(m)
    def _(i):
        combo[i+n][0] = sfix.get_input_from(1)
        combo[i+n][1] =1
        combo[i+n][2] = 0
        
        

    shuf_int = merge_and_shuffle(combo)
    



    
n=512
m=512

shuffled_intersection_inputs(n,m)

